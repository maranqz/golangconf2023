package tags

import (
	"strings"

	"github.com/quasilyte/go-ruleguard/dsl"
	"github.com/quasilyte/go-ruleguard/dsl/types"
)

// https://github.com/quasilyte/go-ruleguard/blob/master/_docs/dsl.md#creating-a-ruleguard-bundle
var Bundle = dsl.Bundle{}

// tags blocks struct tags
func tags(m dsl.Matcher) {
	m.Match("type $s struct{$*_; $f; $*_}").
		Where(m["f"].Text.Matches("(?:[^s]+ +){1,2}`.+`") &&
			m["s"].Filter(tagsFilter)).
		At(m["f"]).
		Report(`Don't use tags`)
}

func tagsFilter(ctx *dsl.VarFilterContext) bool {
	typS := ctx.Type

	asPointer := types.AsPointer(typS)
	if asPointer != nil {
		typS = asPointer.Elem()
	}

	// go-ruleguard –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ü–∏–∫–ª—ã, –ø–æ—ç—Ç–æ–º—É –µ—Å–ª–∏ –±—É–¥–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–∫–µ—Ç–æ–≤, —Ç–æ –∏—Ö –Ω—É–∂–Ω–æ –ø—Ä–æ–ø–∏—Å—ã–≤–∞—Ç—å —è–≤–Ω–æ && strings.HasPrefix(typS.String(), "ddd/example/app/domain/").
	// –ú–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤ —Å—Ç–æ—Ä–æ–Ω—É codeQL –∏–ª–∏ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –ª–∏–Ω—Ç–µ—Ä–∞ –Ω–∞ go üòâ
	return strings.HasPrefix(typS.String(), "ddd/example/app/domain/") ||
		strings.HasPrefix(typS.String(), "ddd/testdata/src/tags")
}
